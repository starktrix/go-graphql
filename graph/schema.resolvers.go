package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"starktrix/ql/graph/model"
)

// Post is the resolver for the post field.
func (r *mutationResolver) Post(ctx context.Context, url string, description string) (model.LinkOrErr, error) {
	// panic(fmt.Errorf("not implemented: Post - post"))
	
	if url == "error" {
		return model.Err{
			ErrMsg: "invalid url",
		}, nil
	}
	link := &model.Link{
		ID: string(r.count),
		Description: description,
		URL: url,
	}
	r.count++
	r.links = append(r.links, link)
	return link, nil

}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, email string, password string, name string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Signup - signup"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Info is the resolver for the info field.
func (r *queryResolver) Info(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Info - info"))
}

// Feed is the resolver for the feed field.
func (r *queryResolver) Feed(ctx context.Context) ([]*model.Link, error) {
	// panic(fmt.Errorf("not implemented: Feed - feed"))
	// var links []*model.Link
	// dummy := model.Link{
	// 	ID: "dummyId",
	// 	Description: "dummy desc",
	// 	URL: "www.goggle.com",
	// }
	// links = append(links, &dummy)
	// return links, nil
	return r.links, nil
}

// NewLink is the resolver for the newLink field.
func (r *subscriptionResolver) NewLink(ctx context.Context, id *string) (<-chan *model.Link, error) {
	panic(fmt.Errorf("not implemented: NewLink - newLink"))
}

// NewLink2 is the resolver for the newLink2 field.
func (r *subscriptionResolver) NewLink2(ctx context.Context, id *string) (<-chan *model.Link, error) {
	panic(fmt.Errorf("not implemented: NewLink2 - newLink2"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
